from aiogram import Dispatcher, executor, types
from aiogram.dispatcher import FSMContext
from aiogram.types.input_media import InputMedia
from aiogram.dispatcher.filters import Text

from tgbot.handlers.admin import send_admin_mess
from tgbot.handlers.growing_products import growing_products
from tgbot.misc.states import UserStates
from tgbot.keyboards.inline import get_inline_user, MarkupName

async def start(message: types.Message):
    await message.bot.send_chat_action(message.chat.id, 'typing')
    await UserStates.start.set()
    markup = get_inline_user(MarkupName.start)
    await message.answer('''<b>üëãüèª –ü—Ä–∏–≤–µ—Ç! –Ø –≤–∞—à –Ω–∞–¥–µ–∂–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –≤ –∞–Ω–∞–ª–∏–∑–µ —Ç–æ–≤–∞—Ä–æ–≤ —Å –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–æ–≤ Wildberries –∏ Ozon.</b> 

–ß—Ç–æ –≤—ã –º–æ–∂–µ—Ç–µ —É–∑–Ω–∞—Ç—å –±–ª–∞–≥–æ–¥–∞—Ä—è –º–Ω–µ:

üîπ –ú–µ—Å—è—á–Ω—ã–π –æ–±–æ—Ä–æ—Ç —Ç–æ–≤–∞—Ä–∞;
üîπ –ù–∞—Å–∫–æ–ª—å–∫–æ —Ç–æ–≤–∞—Ä –ø–æ–ø—É–ª—è—Ä–µ–Ω –ø–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—é —Å –¥—Ä—É–≥–∏–º–∏ —Ç–æ–≤–∞—Ä–∞–º–∏;
üîπ –¢–æ–≤–∞—Ä–Ω—ã–µ –æ—Å—Ç–∞—Ç–∫–∏ –∏ –Ω–∞ –∫–∞–∫–∏—Ö —Å–∫–ª–∞–¥–∞—Ö –Ω–∞—Ö–æ–¥–∏—Ç—Å—è —Ç–æ–≤–∞—Ä;
üîπ –ü–æ –∫–∞–∫–æ–π —Ü–µ–Ω–µ —Ç–æ–≤–∞—Ä –ø—Ä–æ–¥–∞–≤–∞–ª—Å—è –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 2 –Ω–µ–¥–µ–ª–∏, –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–π —Ü–µ–Ω—ã;
üîπ –ü–æ–∑–∏—Ü–∏—é —Ç–æ–≤–∞—Ä–∞ –ø–æ –∑–∞–ø—Ä–æ—Å—É;
üîπ –ü–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–æ–≤, –±—ã—Å—Ç—Ä–æ –Ω–∞–±–∏—Ä–∞—é—â–∏—Ö —Å–ø—Ä–æ—Å''',
                         parse_mode="html",
                         reply_markup=markup)

async def location(message: types.Message):
    # –ü–æ–ª—É—á–µ–Ω–∏–µ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    latitude = message.location.latitude
    longitude = message.location.longitude
    print(latitude)
    print(longitude)
    # –í—ã–≤–æ–¥ –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
    await message.answer(f"–í–∞—à–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: {latitude}, {longitude}")



async def functions(message: types.Message):
    await message.bot.send_chat_action(message.chat.id, 'typing')
    await message.answer('''<b>–í–æ—Ç —á—Ç–æ —É–º–µ–µ—Ç –±–æ—Ç:</b> 

üîπ –ú–µ—Å—è—á–Ω—ã–π –æ–±–æ—Ä–æ—Ç —Ç–æ–≤–∞—Ä–∞;
üîπ –ù–∞—Å–∫–æ–ª—å–∫–æ —Ç–æ–≤–∞—Ä –ø–æ–ø—É–ª—è—Ä–µ–Ω –ø–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—é —Å –¥—Ä—É–≥–∏–º–∏ —Ç–æ–≤–∞—Ä–∞–º–∏;
üîπ –¢–æ–≤–∞—Ä–Ω—ã–µ –æ—Å—Ç–∞—Ç–∫–∏ –∏ –Ω–∞ –∫–∞–∫–∏—Ö —Å–∫–ª–∞–¥–∞—Ö –Ω–∞—Ö–æ–¥–∏—Ç—Å—è —Ç–æ–≤–∞—Ä;
üîπ –ü–æ –∫–∞–∫–æ–π —Ü–µ–Ω–µ —Ç–æ–≤–∞—Ä –ø—Ä–æ–¥–∞–≤–∞–ª—Å—è –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 2 –Ω–µ–¥–µ–ª–∏, –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–π —Ü–µ–Ω—ã;
üîπ –ü–æ–∑–∏—Ü–∏—é —Ç–æ–≤–∞—Ä–∞ –ø–æ –∑–∞–ø—Ä–æ—Å—É;
üîπ –ü–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–æ–≤, –±—ã—Å—Ç—Ä–æ –Ω–∞–±–∏—Ä–∞—é—â–∏—Ö —Å–ø—Ä–æ—Å''',
                         parse_mode="html")

async def help(message: types.Message):
    await UserStates.help.set()
    print(message)
    await message.bot.send_chat_action(message.chat.id, 'typing')
    await message.answer('üõ† –ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –Ω–µ–ø–æ–ª–∞–¥–∫–∏,'
                         '–Ω–∞–ø–∏—à–∏—Ç–µ –Ω–∏–∂–µ <b>–æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º</b> –≤–∞—à—É –ø—Ä–æ–±–ª–µ–º—É.\n\n'
                         '<i>–ë—ã–ª–æ –±—ã –∑–∞–º–µ—á–∞—Ç–µ–ª—å–Ω–æ, –µ—Å–ª–∏ –≤—ã –º–æ–≥–ª–∏ –±—ã –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç—ã –∏ '
                         '–ø–æ–¥—Ä–æ–±–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –≤–æ–∑–Ω–∏–∫—à–µ–π –ø—Ä–æ–±–ª–µ–º—ã.</i>',
                         parse_mode="html")

async def help2(message: types.Message, state: FSMContext):
    await state.reset_state()

    await message.bot.send_chat_action(message.chat.id, 'typing')

    await send_admin_mess(message)

    await message.answer('‚òëÔ∏è –í–∞—à–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ –ø—Ä–∏–Ω—è—Ç–æ!\n'
                         '‚öôÔ∏è –ú—ã —É–∂–µ –Ω–∞—á–∞–ª–∏ —Ä–∞–±–æ—Ç—É, –Ω–∞–¥ –≤–∞—à–µ–π –ø—Ä–æ–±–ª–µ–º–æ–π!',
                         parse_mode="html")

async def start_growing_products(call: types.CallbackQuery, state: FSMContext):
    await growing_products(call.message)

async def start_product_position(call: types.CallbackQuery, state: FSMContext):
    print("SSSS")
    await UserStates.registration_password.set()
    await call.message.answer(
        '<i>–ü—Ä–∏–¥—É–º–∞–π—Ç–µ –∏ –≤–≤–µ–¥–∏—Ç–µs–ª–æ–≥–∏–Ω:</i>',
        parse_mode='html')

async def start_fastgrowing_products(call: types.CallbackQuery, state: FSMContext):
    print("SSSS")
    await UserStates.registration_password.set()
    await call.message.answer(
        '<i>ss–ü—Ä–∏–¥—É–º–∞–π—Ç–µ –∏ –≤–≤–µ–¥–∏—Ç–µ –ªsafads–æ–≥–∏–Ω:</i>',
        parse_mode='html')

async def password(message: types.CallbackQuery, state: FSMContext):
    await message.answer(
        '<i>–ü—Ä–∏–¥—É–º–∞–π—Ç–µ –∏ –≤–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å:</i>',
        parse_mode='html')

def user(dp: Dispatcher):
    dp.register_message_handler(start, commands="start", state='*')
    dp.register_message_handler(functions, commands="functions", state='*')
    dp.register_message_handler(help, commands="help", state='*')
    dp.register_message_handler(location, content_types='location')

    dp.register_message_handler(help2, state=UserStates.help)
    dp.register_callback_query_handler(start_growing_products, Text(startswith="monthly_turnover"), state=UserStates.start)
    dp.register_callback_query_handler(start_product_position, Text(startswith="product_position"), state=UserStates.start)
    dp.register_callback_query_handler(start_fastgrowing_products, Text(startswith="fastgrowing_products"), state=UserStates.start)
    dp.register_message_handler(password, state=UserStates.registration_password)

